# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FEWHi33W8sutZ4DUBfLiFTa5f8S7y_Fg
"""

import streamlit as st
import numpy as np
import joblib
import requests
from joblib import load


# Load the saved model
url = 'https://drive.google.com/uc?id=1_DcUl848RSTa_denJAdc3GfeH2Hxr6cf'
output = 'best_pipeline_credit.sav'
response = requests.get(url)
with open(output, 'wb') as f:
    f.write(response.content)

# Load the sav file
model = load(output)

# Set up the Streamlit app
st.title("Diabetes Prediction App")
st.markdown("""
    This application predicts whether an individual has diabetes based on various health metrics. 
    Fill in the fields below and click "Predict" to see the result.
""")

# Input fields for user data
st.sidebar.header("Input Features")

# Create input fields for each feature with default values
pregnancies = st.sidebar.number_input("Pregnancies", min_value=0, max_value=20, step=1, value=1)
glucose = st.sidebar.number_input("Glucose Level", min_value=0, max_value=300, value=100)
blood_pressure = st.sidebar.number_input("Blood Pressure", min_value=0, max_value=180, value=70)
skin_thickness = st.sidebar.number_input("Skin Thickness", min_value=0, max_value=100, value=20)
insulin = st.sidebar.number_input("Insulin Level", min_value=0, max_value=900, value=80)
bmi = st.sidebar.number_input("BMI", min_value=0.0, max_value=100.0, value=25.0)
diabetes_pedigree = st.sidebar.number_input("Diabetes Pedigree Function", min_value=0.0, max_value=5.0, step=0.01, value=0.5)
age = st.sidebar.number_input("Age", min_value=0, max_value=120, step=1, value=30)

# Create a button to make predictions
if st.sidebar.button("Predict"):
    # Create an array of input values
    input_data = np.array([[pregnancies, glucose, blood_pressure, skin_thickness, insulin, bmi, diabetes_pedigree, age]])

    # Make prediction
    prediction = model.predict(input_data)

    # Display the result with an attractive format
    st.subheader("Prediction Result")
    if prediction == 1:
        st.success("The model predicts that the individual **has diabetes**.")
    else:
        st.success("The model predicts that the individual **does not have diabetes**.")

# Additional styling for a more attractive interface
st.sidebar.markdown("""
    ### Instructions
    1. Fill in the metrics based on your health data.
    2. Click **Predict** to see if diabetes is likely.
""")
